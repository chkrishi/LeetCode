#My original soln but it has to traverse the LL twice
class Solution(object):
    def middleNode(self, head):
        arr = []
        while head.next:
            arr.append(head.val)
            head = head.next
        arr.append(head.val)
        arr = arr[len(arr) // 2:]
        p1 = ListNode(arr[-1])
        for i in range(len(arr)-2,-1,-1):
            p1 = ListNode(arr[i],p1)
        return p1
# Solution 2 using Fast & Slow pointer technique [Fast goes twice as Slow, when Fast reaches the end of the LL slow is the middle of LL]
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        fast = head
        slow = head
        while fast != None and fast.next != None:
            slow = slow.next
            fast = fast.next.next
        return slow
