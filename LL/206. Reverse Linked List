#My solution, but didnt work

class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution(object):
    def reverseList(self, head):
        curr = head
        arr = []
        while curr:
            arr.append(curr.val)
            curr = curr.next
        arr = arr[::-1]
        hrr = ListNode(arr[0])
        current = hrr
        for i in range(1,len(arr)):
            current.next = ListNode(arr[i])
            current = current.next
        return hrr
        """
        :type head: Optional[ListNode]
        :rtype: Optional[ListNode]
        """

_________________________________________________________________________________________________________________
#Solution from solutions section
class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution(object):
    def reverseList(self, head):
        prev = None  # Initialize prev as None
        curr = head  # Start with curr at the head of the list

        while curr:
            temp = curr.next  # Store the next node
            curr.next = prev  # Reverse the pointer
            prev = curr       # Move prev forward
            curr = temp      # Move curr forward

        return prev  # prev is the new head of the reversed list
