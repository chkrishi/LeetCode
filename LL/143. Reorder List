#My solution but TLE Error


class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        def reverselist(root: ListNode)-> ListNode:
            prev = None
            curr = root
            while curr:
                temp = curr.next
                curr.next = prev
                prev = curr
                curr = temp
            return prev
        if not head :
            return None
        slow, fast = head, head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        slow.next = None
        slow = reverselist(slow)
        first, second = head, slow
        while second:
            tmp1 = first.next
            tmp2 = second.next
            first.next = second
            second.next = tmp1
            first = tmp1
            second = tmp2
______________________________________________________________________________________________________________________________________________________________________________________________________________________________
# Iterated soln from soln's section but MEMORY EXCEEDED
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        def merge(list1: ListNode, list2: ListNode)-> None:
            while list2:
                nextNode = list1.next
                list1.next = list2
                list1 = list2
                list2 = nextNode
        def reverselist(root: ListNode)-> ListNode:
            prev = None
            curr = root
            while curr:
                temp = curr.next
                curr.next = prev
                prev = curr
                curr = temp
            return prev
        if not head :
            return None
        slow, fast = head, head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        slow.next = None
        slow = reverselist(slow)
        first, second = head, slow
        merge(first,second)
____________________________________________________________________________________________________________________________________________________________________________________________________________________________
# Accepeted soln from soln's section

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverse(self, head):
        if not head:
            return None
        prev = None
        curr = head
        nextNode = None
        while curr:
            nextNode = curr.next
            curr.next = prev
            prev = curr
            curr = nextNode
        return prev

    def merge(self, list1, list2):
        while list2:
            nextNode = list1.next
            list1.next = list2
            list1 = list2
            list2 = nextNode

    def reorderList(self, head):
        if not head or not head.next:
            return
        slow = head
        fast = head
        prev = head
        while fast and fast.next:
            prev = slow
            fast = fast.next.next
            slow = slow.next
        prev.next = None
        list1 = head
        list2 = self.reverse(slow)
        self.merge(list1, list2)
