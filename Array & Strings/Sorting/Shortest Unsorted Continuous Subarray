#My own solution but failed 37/307

class Solution:
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        count = 0
        stk = []
        arr = []
        if nums == sorted(nums):
            return 0
        stk.append(nums[0])
        for i in range(1,len(nums)):
            if stk[-1] < nums[i]:
                while stk and stk[-1] <= nums[i]:
                    stk.pop()
                arr.append(i)
                break
        stk = []
        stk.append(nums[-1])
        for i in range(len(nums)-2,1,-1):
            if stk[-1] > nums[i]:
                while stk and stk[-1] >= nums[i]:
                    stk.pop()
                arr.append(len(nums)-i)
                break
        count = len(nums) - (sum(arr) - 1)
        return count

_________________________________________________________________________________________________________________________________________
#FROM SOLUTIONS SECTION
#Sorting
#The algorithm goes like this:
#Create a sorted clone of the original list.
#Compare the elements at same index in both the list. Once you encounter a mismatch, use that to find the lower and upper bounds of the unsorted subarray.

class Solution:
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        sorted_nums = sorted(nums)
        
        l, u = len(nums) - 1,0
        for i in range(len(nums)):
            if nums[i]!=sorted_nums[i]:
                l=min(l, i)
                u=max(u, i)
        
        
        return 0 if l>=u else u-l+1
