#My soln didn't work cuz of memory Limit
class Solution(object):
    def swapNodes(self, head, k):
        if not head or not head.next:
            return head
        first = head
        count = self.lengthofLL(head)
        for i in range(k-1):
            prev_first = first
            first_val = first = first.next
        for i in range(k-1,count-k):
            prev_last = first
            last_val = first = first.next
        prev_first.next = last_val
        last_val.next = first_val.next
        prev_last.next = first_val
        first_val.next = last_val.next
        for i in range(count-k,k):
            first = first.next
        print(prev_first.val,'--->',first_val.val)
        print(prev_last.val,'--->',last_val.val)
        return head
    def lengthofLL(self,head):
        count = 0
        while head:
            head = head.next
            count += 1
        return count


#Took help of soln section------------> Don't interchange nodes, interchange values.
[1,2,3,4,5,6,7,8,9] , k = 3
then we need to interchange 3,7.
[1,2,3,4,5,6,7,8,9] ----> Traverse the first variable and save the value.
     j
[1,2,3,4,5,6,7,8,9] ----> Traverse the end and get the value.
             i    j
Now exchange and return Head



class Solution(object):
    def swapNodes(self, head, k):
        first = last = head                                   Initialize first & Last Nodes
        for i in range(k - 1):                                Give a jump start to first variable
            first = first.next                                
        temp = first                                          Save the first value to be interchanged
        while first.next:
            last, first = last.next, first.next              Traverse till the end.
        temp.val, last.val = last.val, temp.val              Exchange Values
        return head
