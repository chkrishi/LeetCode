#ChatGPT code and this has the least time complexity(0 ms).
class Solution(object):
    def twoSum(self, nums, target):
        # Create a dictionary to store the number and its corresponding index
        num_dict = {}
        
        # Loop through each number in the array
        for i, num in enumerate(nums):
            # Calculate the complement (the number that when added to num equals target)
            complement = target - num
            
            # If complement is already in the dictionary, return the current index and the complement's index
            if complement in num_dict:
                return [num_dict[complement], i]
            
            # If complement is not found, store the current number with its index
            num_dict[num] = i
__________________________________________________________________________________________________________________________________________________________
#Time complexity is too High(8895 ms)---->Submitted code
class Solution(object):
    def twoSum(self, nums, target):
        n,sumval = len(nums),0
        arr = []
        i,j =0,n-1
        while i < len(nums) and j > 0:
            sumval = nums[i] + nums[j]
            if sumval == target and i != j:
                arr.append(i)
                arr.append(j)
                return arr
            else :
                if j == 1:
                    i += 1
                    j = n-1
                else :
                    j -= 1
        return []
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
