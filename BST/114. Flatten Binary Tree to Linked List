# Optimal soln from submitted solns section -> single pass [Just rewire the left to the right]
class Solution:
    def flatten(self, root):
        current = root
        while current:
            if current.left:
                # Find the rightmost node of the left subtree
                rightmost = current.left
                while rightmost.right:
                    rightmost = rightmost.right
                # Rewire the connections
                rightmost.right = current.right
                current.right = current.left
                current.left = None
            current = current.right

        
________________________________________________________________________________________________________________________________________________________________________
#98% my own soln except for line 18 -_- where i used curr.right = arr[i] instead of TreeNode
#Not an optimal soln as its a 2 pass method
class Solution(object):
    def flatten(self, root):
        def lvalued(root):
            if root is None:
                return  
            elif root.left is None and root.right is None:
                arr.append(int(root.val))
            else:
                arr.append(int(root.val))
                lvalued(root.left)
                lvalued(root.right)
        i = 0 
        curr,arr = root,[]
        lvalued(root)
        for i in range(1,len(arr)):
            curr.left = None
            curr.right = TreeNode(arr[i])
            curr = curr.right
